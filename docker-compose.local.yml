services:
  localstack:
    image: localstack/localstack:3.0
    container_name: localstack_main
    ports:
      - "${LOCALSTACK_PORT:-4566}:4566"
      - "${LOCALSTACK_PORT_RANGE:-4510-4559}:4510-4559"
    environment:
      - SERVICES=${LOCALSTACK_SERVICES:-sqs,s3,lambda,iam,logs}
      - DEBUG=${LOCALSTACK_DEBUG:-0}
      - DATA_DIR=${LOCALSTACK_DATA_DIR:-/var/lib/localstack/data}
      - LAMBDA_EXECUTOR=${LOCALSTACK_LAMBDA_EXECUTOR:-docker-reuse}
      - LAMBDA_REMOTE_DOCKER=${LOCALSTACK_LAMBDA_REMOTE_DOCKER:-true}
      - LAMBDA_REMOVE_CONTAINERS=${LOCALSTACK_LAMBDA_REMOVE_CONTAINERS:-true}
      - DOCKER_HOST=${LOCALSTACK_DOCKER_HOST:-unix:///var/run/docker.sock}
      - AWS_DEFAULT_REGION=${LOCALSTACK_AWS_DEFAULT_REGION:-us-east-1}
      - PERSISTENCE=${LOCALSTACK_PERSISTENCE:-1}
      - EAGER_SERVICE_LOADING=${LOCALSTACK_EAGER_SERVICE_LOADING:-1}
      - LOCALSTACK_HOST=${LOCALSTACK_HOST:-localhost:4566}
      - TMPDIR=${LOCALSTACK_TMPDIR:-/var/lib/localstack/tmp}
    volumes:
      - "${LOCALSTACK_TMPDIR:-./tmp}/localstack:/var/lib/localstack"
      - "/var/run/docker.sock:/var/run/docker.sock"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4566/_localstack/health"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    networks:
      - ${DOCKER_NETWORK:-audit-network}

  postgres:
    image: postgres:15-alpine
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${DB_NAME:-audit_reports_aggregator}
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - ${DOCKER_NETWORK:-audit-network}

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    ports:
      - "5050:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL:-admin@admin.com}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASS:-admin}
    networks:
      - ${DOCKER_NETWORK:-audit-network}

  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: audit_rabbitmq
    ports:
      - "5672:5672"     # AMQP port
      - "15672:15672"   # Management UI
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER:-admin}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASS:-admin}
      - RABBITMQ_DEFAULT_VHOST=${RABBITMQ_VHOST:-/}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - rabbitmq_logs:/var/log/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - ${DOCKER_NETWORK:-audit-network}

  downloader:
    build:
      dockerfile: ./workers/downloader/Dockerfile
    image: downloader-worker:latest  # Optional: name the built image
    container_name: downloader-worker
    ports:
      - "8080:8080"
    volumes:
      - /tmp/storage:/tmp/storage
    env_file:
      - ./workers/downloader/.env.local
    environment: # overrides .env (we are running on audit-network)
      - DB_HOST=postgres
      - RABBITMQ_URL=amqp://admin:admin@audit_rabbitmq:5672/
    depends_on:
    - postgres
    - rabbitmq
    networks:
    - ${DOCKER_NETWORK:-audit-network}

volumes:
  terraform_cache:
  postgres_data:
  rabbitmq_data:
  rabbitmq_logs:

networks:
  audit-network:
    driver: bridge
